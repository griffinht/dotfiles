(define-public rust-wrapped-vec-0.3
  (package
    (name "rust-wrapped-vec")
    (version "0.3.0")
    (source
     (origin
       (method url-fetch)
       (uri (crate-uri "wrapped-vec" version))
       (file-name (string-append name "-" version ".tar.gz"))
       (sha256
        (base32 "1rdl013c0drbgqs70f8gkmlbp92yqz4i60p9w5lrd48y5iq0hpmq"))))
    (build-system cargo-build-system)
    (arguments
     `(#:skip-build? #t
       #:cargo-inputs (("rust-proc-macro2" ,rust-proc-macro2-1)
                       ("rust-quote" ,rust-quote-1)
                       ("rust-syn" ,rust-syn-1))))
    (home-page "https://github.com/bobbo/wrapped-vec")
    (synopsis
     "Macro for generating wrapped Vec types and associated boilerplate")
    (description
     "Macro for generating wrapped Vec types and associated boilerplate")
    (license (list license:expat license:asl2.0))))

(define-public rust-attohttpc-0.25
  (package
    (name "rust-attohttpc")
    (version "0.25.0")
    (source
     (origin
       (method url-fetch)
       (uri (crate-uri "attohttpc" version))
       (file-name (string-append name "-" version ".tar.gz"))
       (sha256
        (base32 "081671gy9h3hpv0620d6lsbnby771wcg6yp92qrzycsgm3kxcmvy"))))
    (build-system cargo-build-system)
    (arguments
     `(#:skip-build? #t
       #:cargo-inputs (("rust-base64" ,rust-base64-0.13)
                       ("rust-encoding-rs" ,rust-encoding-rs-0.8)
                       ("rust-encoding-rs-io" ,rust-encoding-rs-io-0.1)
                       ("rust-flate2" ,rust-flate2-1)
                       ("rust-http" ,rust-http-0.2)
                       ("rust-log" ,rust-log-0.4)
                       ("rust-mime" ,rust-mime-0.3)
                       ("rust-multipart" ,rust-multipart-0.18)
                       ("rust-native-tls" ,rust-native-tls-0.2)
                       ("rust-rustls" ,rust-rustls-0.21)
                       ("rust-rustls-native-certs" ,rust-rustls-native-certs-0.6)
                       ("rust-serde" ,rust-serde-1)
                       ("rust-serde-json" ,rust-serde-json-1)
                       ("rust-serde-urlencoded" ,rust-serde-urlencoded-0.7)
                       ("rust-url" ,rust-url-2)
                       ("rust-webpki" ,rust-webpki-0.22)
                       ("rust-webpki-roots" ,rust-webpki-roots-0.23))))
    (home-page "https://github.com/sbstp/attohttpc")
    (synopsis "Small and lightweight HTTP client")
    (description "Small and lightweight HTTP client")
    (license license:mpl2.0)))

(define-public rust-rustfm-scrobble-proxy-2
  (package
    (name "rust-rustfm-scrobble-proxy")
    (version "2.0.0")
    (source
     (origin
       (method url-fetch)
       (uri (crate-uri "rustfm-scrobble-proxy" version))
       (file-name (string-append name "-" version ".tar.gz"))
       (sha256
        (base32 "1ghjr57ipq9wj9c4ik6i2fzbs6msrm058ycm0rbhp67vh5c4wq7y"))))
    (build-system cargo-build-system)
    (arguments
     `(#:skip-build? #t
       #:cargo-inputs (("rust-attohttpc" ,rust-attohttpc-0.25)
                       ("rust-md5" ,rust-md5-0.7)
                       ("rust-serde" ,rust-serde-1)
                       ("rust-serde-json" ,rust-serde-json-1)
                       ("rust-wrapped-vec" ,rust-wrapped-vec-0.3))))
    (home-page "https://github.com/InputUsername/rustfm-scrobble-proxy")
    (synopsis
     "Fork of rustfm-scrobble, a Last.fm Scrobble crate, adding proxy support")
    (description
     "Fork of rustfm-scrobble, a Last.fm Scrobble crate, adding proxy support")
    (license license:expat)))

(define-public rust-from-variants-impl-1
  (package
    (name "rust-from-variants-impl")
    (version "1.0.2")
    (source
     (origin
       (method url-fetch)
       (uri (crate-uri "from_variants_impl" version))
       (file-name (string-append name "-" version ".tar.gz"))
       (sha256
        (base32 "17p6djij0ar0c9dlfnq4dj9bgmq16fcsf3winjr9cv8fm12fd9am"))))
    (build-system cargo-build-system)
    (arguments
     `(#:skip-build? #t
       #:cargo-inputs (("rust-darling" ,rust-darling-0.14)
                       ("rust-proc-macro2" ,rust-proc-macro2-1)
                       ("rust-quote" ,rust-quote-1)
                       ("rust-syn" ,rust-syn-1))))
    (home-page "https://github.com/TedDriggs/from_variants")
    (synopsis "Internal helper crate for from_variants crate.")
    (description "Internal helper crate for from_variants crate.")
    (license (list license:expat license:asl2.0))))

(define-public rust-from-variants-1
  (package
    (name "rust-from-variants")
    (version "1.0.2")
    (source
     (origin
       (method url-fetch)
       (uri (crate-uri "from_variants" version))
       (file-name (string-append name "-" version ".tar.gz"))
       (sha256
        (base32 "1wmv85523z261vwmx1iqjykf0dp8fvy9kgjxj0c7cs2p427rr1af"))))
    (build-system cargo-build-system)
    (arguments
     `(#:skip-build? #t
       #:cargo-inputs (("rust-from-variants-impl" ,rust-from-variants-impl-1))))
    (home-page "https://github.com/TedDriggs/from_variants")
    (synopsis
     "Rust macro to automatically generate conversions for newtype enums.")
    (description
     "Rust macro to automatically generate conversions for newtype enums.")
    (license (list license:expat license:asl2.0))))

(define-public rust-enum-kinds-0.5
  (package
    (name "rust-enum-kinds")
    (version "0.5.1")
    (source
     (origin
       (method url-fetch)
       (uri (crate-uri "enum-kinds" version))
       (file-name (string-append name "-" version ".tar.gz"))
       (sha256
        (base32 "0qnlgzlsydnxsgcf2lkvqsrmdxignjkam1fsnfd4c7b8amls2h2f"))))
    (build-system cargo-build-system)
    (arguments
     `(#:skip-build? #t
       #:cargo-inputs (("rust-proc-macro2" ,rust-proc-macro2-1)
                       ("rust-quote" ,rust-quote-1)
                       ("rust-syn" ,rust-syn-1))))
    (home-page "https://github.com/Soft/enum-kinds")
    (synopsis
     "Generate enums with matching variants but without any of the associated data.")
    (description
     "Generate enums with matching variants but without any of the associated data.")
    (license license:expat)))

(define-public rust-derive-is-enum-variant-0.1
  (package
    (name "rust-derive-is-enum-variant")
    (version "0.1.1")
    (source
     (origin
       (method url-fetch)
       (uri (crate-uri "derive_is_enum_variant" version))
       (file-name (string-append name "-" version ".tar.gz"))
       (sha256
        (base32 "15w18649m4h47pdpr04id0wv8br8bg606zvrafcrfijihicqib6h"))))
    (build-system cargo-build-system)
    (arguments
     `(#:skip-build? #t
       #:cargo-inputs (("rust-heck" ,rust-heck-0.3)
                       ("rust-quote" ,rust-quote-0.3)
                       ("rust-syn" ,rust-syn-0.11))))
    (home-page "https://github.com/fitzgen/derive_is_enum_variant")
    (synopsis
     "Automatically derives `is_dog` and `is_cat` methods for `enum Pet { Dog, Cat }`.")
    (description
     "Automatically derives `is_dog` and `is_cat` methods for `enum Pet { Dog, Cat }`.")
    (license (list license:asl2.0 license:expat))))

(define-public rust-mpris-2
  (package
    (name "rust-mpris")
    (version "2.0.1")
    (source
     (origin
       (method url-fetch)
       (uri (crate-uri "mpris" version))
       (file-name (string-append name "-" version ".tar.gz"))
       (sha256
        (base32 "1svzblilq3kxgra63axl3wibsnl9g8p6b8q1x401wsw2lxazkkjm"))))
    (build-system cargo-build-system)
    (arguments
     `(#:skip-build? #t
       #:cargo-inputs (("rust-dbus" ,rust-dbus-0.9)
                       ("rust-derive-is-enum-variant" ,rust-derive-is-enum-variant-0.1)
                       ("rust-enum-kinds" ,rust-enum-kinds-0.5)
                       ("rust-from-variants" ,rust-from-variants-1)
                       ("rust-thiserror" ,rust-thiserror-1))))
    (home-page "https://github.com/Mange/mpris-rs")
    (synopsis "Idiomatic MPRIS D-Bus interface library")
    (description "Idiomatic MPRIS D-Bus interface library")
    (license license:asl2.0)))

(define-public rust-webpki-roots-0.22
  (package
    (name "rust-webpki-roots")
    (version "0.22.6")
    (source
     (origin
       (method url-fetch)
       (uri (crate-uri "webpki-roots" version))
       (file-name (string-append name "-" version ".tar.gz"))
       (sha256
        (base32 "11rd1aj73qzcvdj3x78crm1758sc4wrbc7rh0r8lmhyjsx01xixn"))))
    (build-system cargo-build-system)
    (arguments
     `(#:skip-build? #t
       #:cargo-inputs (("rust-webpki" ,rust-webpki-0.22))))
    (home-page "https://github.com/rustls/webpki-roots")
    (synopsis "Mozilla's CA root certificates for use with webpki")
    (description "Mozilla's CA root certificates for use with webpki")
    (license license:mpl2.0)))

(define-public rust-attohttpc-0.24
  (package
    (name "rust-attohttpc")
    (version "0.24.1")
    (source
     (origin
       (method url-fetch)
       (uri (crate-uri "attohttpc" version))
       (file-name (string-append name "-" version ".tar.gz"))
       (sha256
        (base32 "18mj9g4xsxkmagykszmwpmqcddn23ikipf8ip7h9wx4snzw9p6ld"))))
    (build-system cargo-build-system)
    (arguments
     `(#:skip-build? #t
       #:cargo-inputs (("rust-base64" ,rust-base64-0.13)
                       ("rust-encoding-rs" ,rust-encoding-rs-0.8)
                       ("rust-encoding-rs-io" ,rust-encoding-rs-io-0.1)
                       ("rust-flate2" ,rust-flate2-1)
                       ("rust-http" ,rust-http-0.2)
                       ("rust-log" ,rust-log-0.4)
                       ("rust-mime" ,rust-mime-0.3)
                       ("rust-multipart" ,rust-multipart-0.18)
                       ("rust-native-tls" ,rust-native-tls-0.2)
                       ("rust-rustls" ,rust-rustls-0.20)
                       ("rust-rustls-native-certs" ,rust-rustls-native-certs-0.6)
                       ("rust-serde" ,rust-serde-1)
                       ("rust-serde-json" ,rust-serde-json-1)
                       ("rust-serde-urlencoded" ,rust-serde-urlencoded-0.7)
                       ("rust-url" ,rust-url-2)
                       ("rust-webpki" ,rust-webpki-0.22)
                       ("rust-webpki-roots" ,rust-webpki-roots-0.22))))
    (home-page "https://github.com/sbstp/attohttpc")
    (synopsis "Small and lightweight HTTP client")
    (description "Small and lightweight HTTP client")
    (license license:mpl2.0)))

(define-public rust-listenbrainz-0.7
  (package
    (name "rust-listenbrainz")
    (version "0.7.0")
    (source
     (origin
       (method url-fetch)
       (uri (crate-uri "listenbrainz" version))
       (file-name (string-append name "-" version ".tar.gz"))
       (sha256
        (base32 "1rdycxr69cj5qlbl04f8hxagf2xiv8q8zwmwbw6v3sq0cvlk3rlz"))))
    (build-system cargo-build-system)
    (arguments
     `(#:skip-build? #t
       #:cargo-inputs (("rust-attohttpc" ,rust-attohttpc-0.24)
                       ("rust-serde" ,rust-serde-1)
                       ("rust-serde-json" ,rust-serde-json-1)
                       ("rust-thiserror" ,rust-thiserror-1))))
    (home-page "https://github.com/InputUsername/listenbrainz-rs")
    (synopsis "ListenBrainz API bindings for Rust")
    (description "@code{ListenBrainz} API bindings for Rust")
    (license license:expat)))

(define-public rust-rescrobbled-0.7
  (package
    (name "rust-rescrobbled")
    (version "0.7.1")
    (source
     (origin
       (method url-fetch)
       (uri (crate-uri "rescrobbled" version))
       (file-name (string-append name "-" version ".tar.gz"))
       (sha256
        (base32 "15rlbr5qj74wsq7kxrs72mif20b6l4p7r6llsnq97k76ixd175yh"))))
    (build-system cargo-build-system)
    (arguments
     `(#:cargo-inputs (("rust-anyhow" ,rust-anyhow-1)
                       ("rust-dirs" ,rust-dirs-5)
                       ("rust-listenbrainz" ,rust-listenbrainz-0.7)
                       ("rust-mpris" ,rust-mpris-2)
                       ("rust-rpassword" ,rust-rpassword-7)
                       ("rust-rustfm-scrobble-proxy" ,rust-rustfm-scrobble-proxy-2)
                       ("rust-serde" ,rust-serde-1)
                       ("rust-toml" ,rust-toml-0.7))
       #:cargo-development-inputs (("rust-tempfile" ,rust-tempfile-3))))
    (home-page "https://github.com/InputUsername/rescrobbled")
    (synopsis "MPRIS music scrobbler daemon")
    (description "MPRIS music scrobbler daemon")
    (license license:gpl3)))

