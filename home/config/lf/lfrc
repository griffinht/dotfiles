# todo khal import file
# todo duplicate switch statements
# todo libreoffice breaks randomly :(
# i think it gets stuck on file not found in the splash screen?

#https://unix.stackexchange.com/questions/3886/difference-between-nohup-disown-and
#maybe use &! or disown?
                # nohup so zathura is not closed when the terminal closes
                # i might want to use this for other things as well
                #
# todo use xdg-open????
cmd open ${{
	case $(file --mime-type -Lb "$f") in
                inode/x-empty)
                    $EDITOR "$f"
                    ;;
 		text/*) 
		    $EDITOR "$f"
		    ;;
		image/*)
		    nohup imv "$f" > /dev/null 2>&1 &
		    ;;
                video/*) 
                    nohup mpv --keep-open=yes --force-window=yes "$f" > /dev/null 2>&1 &
                    ;;
                audio/*)
                    nohup mpv --keep-open=yes --force-window=yes "$f" > /dev/null 2>&1 &
                    ;;
		application/pdf)
		    nohup zathura "$f" > /dev/null 2>&1 &
		    ;;
		application/epub*)
		    nohup zathura "$f" > /dev/null 2>&1 &
		    ;;
		application/gzip)
		    nohup xournalpp "$f" > /dev/null 2>&1 &
		    ;;
                application/msword) 
                    nohup libreoffice "$f" > /dev/null 2>&1 &
                    ;;
                application/vnd.*)
                    nohup libreoffice "$f" > /dev/null 2>&1 &
                    ;;
		*) 
                    # what is this even doing
		    for f in $f; do
			echo $f $(file --mime-type -Lb $f)| less;
			# xdg-open $f > /dev/null 2> /dev/null &
		    done
		    ;;
	esac
}}

# show current directory in window title
#TODO
#https://github.com/gokcehan/lf/wiki/Integrations#git
cmd on-cd &{{
    # '&' commands run silently in background (which is what we want here),
    # but are not connected to stdout.
    # To make sure our escape sequence still reaches stdout we pipe it to /dev/tty
    printf "\033]0;$PWD\007" > /dev/tty

    # also set osc7 escape sequence for foot ctrl+shift+n new terminal to spawn with the correct working directory
    ~/.config/lf/set_osc7.sh
}}

# also run at startup
on-cd

# ctpv previews
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id


cmd fzf_search ${{
    lf -remote "send $id select $( \
        RG_PREFIX="rg --color=always --smart-case --column --line-number --heading --context=5"
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf \
            --disabled --ansi \
            --bind "change:reload:$RG_PREFIX {q} || true" \
            | cut -d ':' -f 1
        )"

#--layout-reverse?
#--header 'header'?
    #--delimiter ':' --preview 'bat --color=always {1} --highlight-line={2}' \
}}
# find grep
map <c-f> :fzf_search
#https://github.com/gokcehan/lf/wiki/Integrations#fzf

# alt-enter to launch in new window
# todo preview with ctpv sixels :O, using bad for now
#todo fix not opening file and navigating
cmd fzf_find ${{
     lf -remote "send $id select $( \
         fzf --preview-window=up --preview="bat --force-colorization "{}"" \
            --bind="alt-enter:execute(swaymsg -t command exec \\\$term lf $(pwd)/{})+abort" \
         )"
         # I HATE SHELL ESCAPING
         # I HATE SHELL ESCAPING
         # I HATE SHELL ESCAPING
 # todo files with spaces dont work somehow bruh
# todo use "become" once fzf updates
# this way fzf isnt left hanging around
# not that it really does but whatever
}}
# find fuzzy
map F :fzf_find



# bruh https://github.com/gokcehan/lf/issues/899
cmd delete %trash-put "$f"
# todo set editor
# set pager var?
map x :delete


#o open as
#map o
# todo duplicate code a
map ox &nohup xournalpp "$f" > /dev/null 2>&1
map oa &nohup audacity "$f" > /dev/null 2>&1
# todo make sure firefox is already open??
map of %firefox "$f"
map oo !"$f"
cmd execute !{{
    "$f" $@
}}
map oO push :execute<space>

# new stuff
#
# unmap n
map n

# nm new directory
cmd mkdir %{{
    mkdir "$1" && lf -remote "send $id select $1"
}}
map nm push :mkdir<space>

# nt new file
cmd touch %{{
    # todo duplicate code c
    touch "$1" && lf -remote "send $id select $1"
}}
map nt push :touch<space>

# nc set executable bit
# todo this is dumb i think
map nc %{{
    chmod +x "$f"
    # lf must be reloaded to show the executable bit has been set
    lf -remote "send $id reload"
}}

# nx new xournalpp document
cmd xournalpp &{{
    # todo duplicate code a
    nohup xournalpp "$1" > /dev/null 2>&1
}}
map nx push :xournalpp<space>

# nn new terminal
map nn &{{
    # todo this is non standard and will probably break
    LF_LEVEL=0 nohup "foot" > /dev/null 2>&1
}}

# nk import ics file to khal
map nk ${{
    khal import "$f"
}}

#g git commands

# git add
map gaa %git add "$f"
map gaA %git add .
# git add (incremental)
map gap $git add -p "$f"
map gaP $git add -p .
# git commit
map gc $git commit
#todo git checkout
#map gh $git checkout {}
# todo bats pager??
# less -Rc todo use (local lf) env var
# -R for raw input to use colors
# -c to always show on the top of the screen
map gs $git -c color.ui=always status . | less -Rc
map gS $git -c color.ui=always status | less -Rc
# git diff
# --diff-filter=d excludes deleted files
map gdd $git diff --name-only --relative --diff-filter=d "$f" | xargs bat --diff --paging=always
map gdD $git diff --name-only --relative --diff-filter=d | xargs bat --diff --paging=always
# git diff --cached
# todo use dandavision/delta
# bat doesnt handled cached output
map gdc $git -c color.ui=always diff --cached --relative "$f" | less -Rc
map gdC $git -c color.ui=always diff --cached --relative | less -Rc
# git reset
map gr %git reset "$f"
map gR %git reset
# git push
# git pull
map gpp $git push
map gpP $git pull
#find a safer way to delete local changes
#map gx $git checkout -- .
# git log
map gl $git log
# git init
cmd gi %{{
# todo duplicate code c
    git init "$1" && lf -remote "send $id select $1"
}}
map gi push :gi<space>

# git clone
cmd gCc !{{
    git clone "$1"
}}
# git clone to current directory
cmd gCc !{{
    git clone "$1" .
}}
map gCc push :gCc<space>
map gCC push :gCC<space>
